{"version":3,"file":"static/css/main.b5628a58.css","mappings":"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","sources":["index.scss","Components/body/body.scss","style/variables.scss","breakpoint/breakpoint.scss","Components/navbar/navbar.scss","Components/projects/projects.scss","Components/about/about.scss","Components/skills/skills.scss","Components/footer/footer.scss"],"sourcesContent":["@import \"./style/variables.scss\";\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  height: 100%;\n  background: #000000;\n}\n","@import \"../../style/variables.scss\";\r\n\r\n.body-container {\r\n  color: $primary-color2;\r\n  font-family: $primary-font;\r\n  height: 100vh;\r\n  width: 100%;\r\n  margin-bottom: 4rem;\r\n  .text {\r\n    padding-top: 10rem;\r\n    width: fit-content;\r\n    height: fit-content;\r\n    margin: auto;\r\n    margin-top: 15vh;\r\n\r\n    h1 {\r\n      font-size: 11vw;\r\n      font-weight: 600;\r\n      padding-left: 25px;\r\n    }\r\n    .ft-text {\r\n      animation: slideFromLeft 2s linear 1;\r\n    }\r\n    .dev-text {\r\n      padding-left: 20rem;\r\n      animation: slideFromRight 2s linear 1;\r\n    }\r\n  }\r\n\r\n  .git-box {\r\n    width: 250px;\r\n    height: 250px;\r\n    margin: auto;\r\n    a {\r\n      font-family: inherit;\r\n      color: inherit;\r\n      text-decoration: none;\r\n      font-size: 40px;\r\n    }\r\n  }\r\n\r\n  @include media(\"<= 1162px\") {\r\n    .text {\r\n      h1 {\r\n        padding: 0;\r\n      }\r\n      .dev-text {\r\n        padding-left: 14rem;\r\n      }\r\n    }\r\n  }\r\n  @include media(\"<= tablet\") {\r\n    .text {\r\n      padding-top: 10rem;\r\n      h1 {\r\n        font-size: 11vw;\r\n        font-weight: 600;\r\n      }\r\n\r\n      .dev-text {\r\n        padding-left: 14vw;\r\n      }\r\n    }\r\n\r\n    .git-box {\r\n      width: fit-content;\r\n      height: fit-content;\r\n      margin: auto;\r\n    }\r\n  }\r\n  @include media(\"<= 480px \") {\r\n    .text {\r\n      margin-top: 2px;\r\n      padding-top: 20rem;\r\n\r\n      h1 {\r\n        font-size: 13vw;\r\n      }\r\n    }\r\n\r\n    .git-box {\r\n      width: fit-content;\r\n      height: fit-content;\r\n      margin: auto;\r\n    }\r\n  }\r\n\r\n  @keyframes slideFromRight {\r\n    0% {\r\n      transform: translateX(150px);\r\n      opacity: 0;\r\n    }\r\n\r\n    50% {\r\n      transform: translateX(100px);\r\n      opacity: 0.5;\r\n    }\r\n\r\n    100% {\r\n      transform: translateX(0px);\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  @keyframes slideFromLeft {\r\n    0% {\r\n      transform: translateX(-200px);\r\n      opacity: 0;\r\n    }\r\n    50% {\r\n      transform: translateX(-100px);\r\n      opacity: 0.5;\r\n    }\r\n    100% {\r\n      transform: translateX(0px);\r\n      opacity: 1;\r\n    }\r\n  }\r\n}\r\n","@import url(\"https://fonts.googleapis.com/css2?family=Gantari:wght@100;200;300;400;500;600;700&display=swap\");\r\n@import \"../breakpoint/breakpoint.scss\";\r\n\r\n$primary-font: \"Gantari\", sans-serif;\r\n\r\n$primary-color: #a3a3a3;\r\n$primary-color1: #e7e7e7;\r\n$primary-color2: #aaaaaa;\r\n$primary-color3: #757575;\r\n","//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v2.0.0\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n@charset \"UTF-8\";\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n@use 'sass:math';\r\n@use 'sass:map';\r\n@use 'sass:list';\r\n@use 'sass:string';\r\n@use 'sass:meta';\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x':\r\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x':\r\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if meta.feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map.get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map.has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not list.index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if string.index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: string.index($expression, $operator);\r\n  $parsed-dimension: string.slice($expression, 0, $operator-index - 1);\r\n  $parsed-dimension: str-trim($parsed-dimension);\r\n  $dimension: 'width';\r\n\r\n  @if string.length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(list.index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: string.index($expression, $operator);\r\n  $value: string.slice($expression, $operator-index + string.length($operator));\r\n  $trimmedValue: str-trim($value);\r\n\r\n  @if map.has-key($breakpoints, $trimmedValue) {\r\n    $value: map.get($breakpoints, $trimmedValue);\r\n  } @else {\r\n    $value: to-number($trimmedValue);\r\n  }\r\n\r\n  $interval: map.get($unit-intervals, math.unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{math.unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map.has-key($media-expressions, $expression) {\r\n    @return map.get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: list.length($list)) {\r\n  @if list.length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: list.append($result, list.nth($list, $i), comma);\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n\r\n@function to-number($value) {\r\n  @if meta.type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if meta.type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: string.slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: (\r\n    '0': 0,\r\n    '1': 1,\r\n    '2': 2,\r\n    '3': 3,\r\n    '4': 4,\r\n    '5': 5,\r\n    '6': 6,\r\n    '7': 7,\r\n    '8': 8,\r\n    '9': 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: string.slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through string.length($value) {\r\n    $character: string.slice($value, $i, $i);\r\n\r\n    @if not(list.index(map.keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), string.slice($value, $i));\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map.get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + math.div(map.get($numbers, $character), $digits);\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    'px': 1px,\r\n    'cm': 1cm,\r\n    'mm': 1mm,\r\n    '%': 1%,\r\n    'ch': 1ch,\r\n    'pc': 1pc,\r\n    'in': 1in,\r\n    'em': 1em,\r\n    'rem': 1rem,\r\n    'pt': 1pt,\r\n    'ex': 1ex,\r\n    'vw': 1vw,\r\n    'vh': 1vh,\r\n    'vmin': 1vmin,\r\n    'vmax': 1vmax,\r\n  );\r\n\r\n  @if not list.index(map.keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map.get($units, $unit);\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Jack McNicol\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Trims a string of leading and trailing spaces\r\n///\r\n/// @param {String} $string - Value to be trimmed\r\n///\r\n/// @return {String}\r\n///\r\n\r\n@function str-trim($string) {\r\n  @if (str-slice($string, 1, 1) == ' ') {\r\n    @return str-trim(str-slice($string, 2));\r\n  } @else if (str-slice($string, str-length($string), -1) == ' ') {\r\n    @return str-trim(str-slice($string, 1, -2));\r\n  } @else {\r\n    @return $string;\r\n  }\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map.merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map.merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and list.length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and list.length($conditions) > 0) {\r\n    @media #{string.unquote(parse-expression(list.nth($conditions, 1)))} {\r\n      // Recursive call\r\n      $sliced-conditions: slice($conditions, 2);\r\n      @include media($sliced-conditions...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}","@import \"../../style/variables.scss\";\r\n\r\n.navbar {\r\n  color: $primary-color1;\r\n  // position: fixed;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  margin-inline: 20px;\r\n  height: 10%;\r\n  font-family: $primary-font;\r\n\r\n  .name {\r\n    animation: slideFromTop 2s linear 1;\r\n  }\r\n  .clock {\r\n    font-size: 15px;\r\n    animation: slideFromTop 2s linear 1;\r\n  }\r\n\r\n  @keyframes slideFromTop {\r\n    0% {\r\n      transform: translateY(-50px);\r\n      opacity: 0;\r\n    }\r\n    50% {\r\n      transform: translateY(-20px);\r\n      opacity: 0.5;\r\n    }\r\n    100% {\r\n      transform: translateY(0px);\r\n      opacity: 1;\r\n    }\r\n  }\r\n}\r\n","@import \"../../style/variables.scss\";\r\n\r\n.project-container {\r\n  font-family: $primary-font;\r\n  color: $primary-color2;\r\n  padding-inline: 40px;\r\n  margin-top: 2rem;\r\n\r\n  .project {\r\n    font-size: 60px;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    margin-bottom: 50px;\r\n  }\r\n\r\n  .line {\r\n    width: 98%;\r\n    height: 1px;\r\n    border: 1px solid;\r\n  }\r\n\r\n  .contents {\r\n    .link {\r\n      width: 100%;\r\n      color: $primary-color2;\r\n\r\n      a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n\r\n        h1 {\r\n          text-transform: uppercase;\r\n          width: 200px;\r\n          padding: 50px 0;\r\n          font-weight: 100;\r\n        }\r\n\r\n        .testts {\r\n          display: flex;\r\n          align-items: center;\r\n          width: 65vw;\r\n          justify-content: space-between;\r\n          .details {\r\n            max-width: 390px;\r\n          }\r\n          .details:hover {\r\n            color: $primary-color1;\r\n          }\r\n          .visit-btn {\r\n            margin-right: 30px;\r\n            width: 100px;\r\n            height: 40px;\r\n            border-radius: 25px;\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n      // a:hover {\r\n      //   color: $primary-color1;\r\n      // }\r\n    }\r\n    .link:hover {\r\n      color: $primary-color1;\r\n      transform: translateX(10px);\r\n    }\r\n  }\r\n\r\n  @include media(\"<= 898px\") {\r\n    padding-left: 12px;\r\n\r\n    .contents {\r\n      .link {\r\n        a {\r\n          flex-wrap: wrap;\r\n          h1 {\r\n            padding: 20px 0;\r\n          }\r\n          .testts {\r\n            display: flex;\r\n            align-items: center;\r\n            width: 90vw;\r\n            justify-content: space-between;\r\n            .details {\r\n              max-width: 350px;\r\n            }\r\n            .visit-btn {\r\n              margin-right: 30px;\r\n              width: 100px;\r\n              height: 40px;\r\n              border-radius: 25px;\r\n              cursor: pointer;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @include media(\"<= 579px \") {\r\n    .contents {\r\n      .link {\r\n        a {\r\n          .visit-btn {\r\n            display: none;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"../../style/variables.scss\";\r\n\r\n.about-container {\r\n  color: $primary-color1;\r\n  font-family: $primary-font;\r\n  font-weight: 100;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-top: 200px;\r\n  margin-bottom: 200px;\r\n\r\n  .img-container {\r\n    margin: auto;\r\n    margin-right: 30px;\r\n    img {\r\n      height: 300px;\r\n      width: 300px;\r\n      border-radius: 50%;\r\n    }\r\n  }\r\n  .about-text {\r\n    font-family: $primary-font;\r\n    margin: auto;\r\n    margin-left: 30px;\r\n    width: 800px;\r\n    height: 300px;\r\n    letter-spacing: 2px;\r\n    h3 {\r\n      font-size: 30px;\r\n      font-weight: 100;\r\n    }\r\n  }\r\n\r\n  @include media(\"<= 1162px\") {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n\r\n    .img-container {\r\n      margin: auto;\r\n      margin-right: 30px;\r\n\r\n      img {\r\n        height: 250px;\r\n        width: 250px;\r\n        border-radius: 50%;\r\n      }\r\n    }\r\n    .about-text {\r\n      font-family: $primary-font;\r\n      margin: auto;\r\n      margin-left: 30px;\r\n      width: 800px;\r\n      h3 {\r\n        font-size: 20px;\r\n        font-weight: 100;\r\n      }\r\n    }\r\n  }\r\n  @include media(\"<= tablet\") {\r\n    flex-wrap: wrap;\r\n    .img-container {\r\n      margin: auto;\r\n      img {\r\n        height: 300px;\r\n        width: 300px;\r\n        border-radius: 50%;\r\n      }\r\n    }\r\n    .about-text {\r\n      margin: auto;\r\n      width: 700px;\r\n      height: 300px;\r\n      letter-spacing: 2px;\r\n      padding: 12px;\r\n      h3 {\r\n        font-size: 25px;\r\n        font-weight: 100;\r\n      }\r\n    }\r\n  }\r\n  @include media(\"<= 480px \") {\r\n    .about-text {\r\n      margin: auto;\r\n      width: 700px;\r\n      height: 300px;\r\n      letter-spacing: 2px;\r\n      h3 {\r\n        font-size: 20px;\r\n        font-weight: 100;\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"../../style/variables.scss\";\r\n\r\n.skill-container {\r\n  color: $primary-color;\r\n  font-family: $primary-font;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  .skill {\r\n    .sk-head {\r\n      font-size: 50px;\r\n      font-weight: 200;\r\n    }\r\n\r\n    .sk-content {\r\n      .sk-line {\r\n        width: 35rem;\r\n        height: 1px;\r\n        border: 1px solid;\r\n        margin: 30px 0;\r\n      }\r\n      .tool {\r\n        font-size: 34px;\r\n        font-weight: 200;\r\n      }\r\n    }\r\n  }\r\n\r\n  .contact-btn {\r\n    height: 5rem;\r\n    background-color: $primary-color;\r\n    width: 15rem;\r\n    border-radius: 10px;\r\n    a {\r\n      text-decoration: none;\r\n      color: black;\r\n      font-family: $primary-font;\r\n      padding: 0.5rem 15rem;\r\n      h1 {\r\n        font-weight: 400;\r\n      }\r\n    }\r\n  }\r\n  margin-bottom: 15rem;\r\n\r\n  @include media(\"<= 873px\") {\r\n    display: block;\r\n    .skill {\r\n      margin-left: 0;\r\n     \r\n    }\r\n\r\n    .contact-btn {\r\n      margin-top: 50px;\r\n      margin-left: 12px;\r\n      \r\n    }\r\n  }\r\n\r\n  @include media(\"<= 585px \") {\r\n    margin-top: 4rem;\r\n    .skill {\r\n      .sk-head {\r\n        font-size: 40px;\r\n      }\r\n\r\n      .sk-content {\r\n        padding: 12px;\r\n        .sk-line {\r\n          width: 90vw;\r\n        }\r\n        .tool {\r\n          font-size: 28px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .contact-btn {\r\n      padding-left: 12px;\r\n     \r\n    }\r\n  }\r\n}\r\n","@import \"../../style/variables.scss\";\r\n\r\n.ft-container {\r\n  color: $primary-color1;\r\n  font-family: $primary-font;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  .ft-name {\r\n    font-size: 25px;\r\n    font-weight: 100;\r\n  }\r\n\r\n  .links {\r\n    a {\r\n      text-decoration: none;\r\n      color: inherit;\r\n      font-family: inherit;\r\n      padding-inline: 2rem;\r\n      font-weight: 500;\r\n      font-size: 15px;\r\n    }\r\n  }\r\n\r\n  .year {\r\n    font-family: $primary-font;\r\n    font-size: 20px;\r\n    font-weight: 100;\r\n  }\r\n\r\n  padding: 1rem 8px;\r\n\r\n  @include media(\"<= 628px\") {\r\n    display: block;\r\n    .ft-name {\r\n      width: fit-content;\r\n      margin: auto;\r\n      padding-bottom: 1rem;\r\n    }\r\n\r\n    .links {\r\n      display: flex;\r\n      width: 100%;\r\n      justify-content: center;\r\n      padding-bottom: 1rem;\r\n    }\r\n\r\n    .year {\r\n      width: fit-content;\r\n      margin: auto;\r\n    }\r\n  }\r\n\r\n  @include media(\"<= 585px \") {\r\n    margin-top: 4rem;\r\n    .skill {\r\n      .sk-head {\r\n        font-size: 40px;\r\n      }\r\n\r\n      .sk-content {\r\n        .sk-line {\r\n          width: 90vw;\r\n        }\r\n        .tool {\r\n          font-size: 28px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}